# Generated by Django 5.2 on 2025-04-20 04:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Plugin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('friendly_name', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=20)),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RaingullUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='member', help_text="User's role in the system", max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('deactivated', 'Deactivated'), ('banned', 'Banned')], default='active', help_text='Account status', max_length=20)),
                ('full_name', models.CharField(blank=True, help_text="User's full name", max_length=255)),
                ('timezone', models.CharField(default='UTC', help_text="User's preferred timezone", max_length=50)),
                ('mfa_enabled', models.BooleanField(default=False, help_text='Whether MFA is enabled for this user')),
                ('mfa_secret', models.CharField(blank=True, help_text='MFA secret key', max_length=32)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of last login', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the account was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the account was last updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='queued', max_length=50)),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('incoming_enabled', models.BooleanField(default=True)),
                ('outgoing_enabled', models.BooleanField(default=True)),
                ('config', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plugin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.plugin')),
            ],
        ),
        migrations.CreateModel(
            name='RaingullStandardMessage',
            fields=[
                ('raingull_id', models.UUIDField(primary_key=True, serialize=False)),
                ('source_message_id', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('snippet', models.CharField(blank=True, max_length=200)),
                ('sender', models.CharField(max_length=255)),
                ('recipients', models.JSONField()),
                ('date', models.DateTimeField()),
                ('headers', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.serviceinstance')),
            ],
            options={
                'db_table': 'core_raingullstandardmessage',
            },
        ),
        migrations.CreateModel(
            name='PluginInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_config', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('service_instance', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='plugin_instance', to='core.serviceinstance')),
            ],
        ),
        migrations.CreateModel(
            name='OutgoingMessageQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raingull_id', models.UUIDField()),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('sent', 'Sent'), ('failed', 'Failed')], default='queued', max_length=20)),
                ('service_message_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('raingull_message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.raingullstandardmessage')),
                ('service_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.serviceinstance')),
            ],
            options={
                'db_table': 'core_outgoingmessagequeue',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('debug', 'Debug')], max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('warning', 'Warning')], max_length=20)),
                ('details', models.TextField()),
                ('service_instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.serviceinstance')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_contact_method', models.CharField(blank=True, max_length=50, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserServiceActivation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('config', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.serviceinstance')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='raingullstandardmessage',
            index=models.Index(fields=['source_service', 'source_message_id'], name='core_raingu_source__344e54_idx'),
        ),
        migrations.AddIndex(
            model_name='raingullstandardmessage',
            index=models.Index(fields=['date'], name='core_raingu_date_f19eb6_idx'),
        ),
        migrations.AddIndex(
            model_name='outgoingmessagequeue',
            index=models.Index(fields=['status', 'created_at'], name='core_outgoi_status_523452_idx'),
        ),
        migrations.AddIndex(
            model_name='outgoingmessagequeue',
            index=models.Index(fields=['user', 'service_instance'], name='core_outgoi_user_id_7bda3b_idx'),
        ),
        migrations.AddIndex(
            model_name='outgoingmessagequeue',
            index=models.Index(fields=['raingull_id'], name='core_outgoi_raingul_7c14d1_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['timestamp'], name='core_auditl_timesta_80074f_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['service_instance'], name='core_auditl_service_c878d5_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['event_type'], name='core_auditl_event_t_04b2f0_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['status'], name='core_auditl_status_4118d1_idx'),
        ),
        migrations.AddIndex(
            model_name='userserviceactivation',
            index=models.Index(fields=['user', 'service_instance'], name='core_userse_user_id_19f6a3_idx'),
        ),
        migrations.AddIndex(
            model_name='userserviceactivation',
            index=models.Index(fields=['is_active'], name='core_userse_is_acti_c89a8a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userserviceactivation',
            unique_together={('user', 'service_instance')},
        ),
    ]
