# Generated by Django 5.2 on 2025-04-22 05:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=50)),
                ('status', models.CharField(max_length=20)),
                ('details', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'core_audit_log',
            },
        ),
        migrations.CreateModel(
            name='Plugin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('friendly_name', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=20)),
                ('manifest', models.JSONField()),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'plugin',
                'verbose_name_plural': 'plugins',
                'db_table': 'core_plugins',
            },
        ),
        migrations.CreateModel(
            name='SystemMessageTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('password_reset', 'Password Reset'), ('admin_notification', 'Admin Notification'), ('system_error', 'System Error')], max_length=20, unique=True)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'core_systemmessagetemplate',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_moderator', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('web_login_enabled', models.BooleanField(default=False, help_text='Whether the user can log into the web interface')),
                ('preferred_contact_method', models.CharField(blank=True, max_length=50, null=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('mfa_secret', models.CharField(blank=True, max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, db_table='core_user_permissions', help_text='Specific permissions for this user.', related_name='core_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'core_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('incoming_enabled', models.BooleanField(default=True)),
                ('outgoing_enabled', models.BooleanField(default=True)),
                ('config', models.JSONField()),
                ('app_config', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plugin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.plugin')),
            ],
            options={
                'db_table': 'core_services',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raingull_id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('direction', models.CharField(choices=[('incoming', 'Incoming'), ('outgoing', 'Outgoing')], db_index=True, max_length=10)),
                ('status', models.CharField(choices=[('new', 'New'), ('processed', 'Processed'), ('formatted', 'Formatted'), ('queued', 'Queued'), ('sent', 'Sent'), ('failed', 'Failed')], db_index=True, default='new', max_length=20)),
                ('service_message_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('subject', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('sender', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('recipient', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('payload', models.JSONField(default=dict)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('retry_count', models.IntegerField(default=0)),
                ('last_retry_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_delivery_time', models.DateTimeField(blank=True, null=True)),
                ('is_urgent', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('source_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_messages', to='core.service')),
            ],
            options={
                'db_table': 'core_messages',
            },
        ),
        migrations.CreateModel(
            name='ServiceMessageTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('invitation', 'Invitation'), ('error', 'Error'), ('notification', 'Notification')], max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('activation_url', models.URLField(blank=True, help_text='URL for the activation link. Use {token} as a placeholder for the activation token.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
            ],
            options={
                'db_table': 'core_servicemessagetemplate',
            },
        ),
        migrations.CreateModel(
            name='UserService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('config', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_user_services',
            },
        ),
        migrations.CreateModel(
            name='MessageQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('retry_count', models.IntegerField(default=0)),
                ('last_retry_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.message')),
            ],
            options={
                'db_table': 'core_message_queue',
                'indexes': [models.Index(fields=['status', 'priority', 'created_at'], name='core_messag_status_da4b56_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['service', 'direction', 'status'], name='core_messag_service_aafe5b_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['timestamp'], name='core_messag_timesta_858a17_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['service_message_id'], name='core_messag_service_3d9926_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['scheduled_delivery_time'], name='core_messag_schedul_295c1d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicemessagetemplate',
            unique_together={('service_instance', 'message_type')},
        ),
        migrations.AlterUniqueTogether(
            name='userservice',
            unique_together={('user', 'service')},
        ),
    ]
